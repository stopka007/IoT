import axios from "axios";

// Define the Patient interface based on the backend model
// Ensure this matches IPatient in apps/server/src/models/patient.model.ts
export interface Patient {
  _id: string; // MongoDB default ID
  id_patient: string;
  id_device: string;
  name: string;
  room: number;
  illness?: string;
  age?: number;
  notes?: string;
}

const API_BASE_URL = "http://localhost:3000/api"; // Consistent base URL

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// --- Patient API Functions ---

export const fetchAllPatients = async (): Promise<Patient[]> => {
  try {
    const response = await apiClient.get("/patients");
    return response.data;
  } catch (error) {
    // Basic error handling, consider more robust logging or user feedback
    console.error("Error fetching patients:", error);
    throw error; // Re-throw to allow components to handle it
  }
};

export const fetchPatientById = async (id: string): Promise<Patient> => {
  try {
    const response = await apiClient.get(`/patients/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching patient ${id}:`, error);
    throw error;
  }
};

// Use Partial<Omit<Patient, '_id'>> for update data flexibility
export const updatePatient = async (
  id: string,
  data: Partial<Omit<Patient, "_id">>,
): Promise<Patient> => {
  try {
    const response = await apiClient.patch(`/patients/${id}`, data);
    return response.data;
  } catch (error) {
    console.error(`Error updating patient ${id}:`, error);
    throw error;
  }
};

// Use Omit<Patient, '_id'> for create data, as _id is generated by DB
export const createPatient = async (data: Omit<Patient, "_id">): Promise<Patient> => {
  try {
    const response = await apiClient.post("/patients", data);
    return response.data;
  } catch (error) {
    console.error("Error creating patient:", error);
    throw error;
  }
};

export const deletePatient = async (id: string): Promise<{ message: string }> => {
  try {
    // Assuming the backend returns { message: "Patient deleted" }
    const response = await apiClient.delete(`/patients/${id}`);
    return response.data;
  } catch (error) {
    console.error(`Error deleting patient ${id}:`, error);
    throw error;
  }
};
